Database Encryption:

I used Django_cryptography to encrypt the ‘data’ field in the Card model. After encryption, card data is no longer visible to someone
with access to the database.

Encrypting the data field breaks functionality based on searching the encrypted column. (Such as the code involved in the sql injection
attack.) For now I changed the signature matching algorithm to match on card name and user id instead. Another solution is to use something
like django-searchable-encrypted-fields. This solution would have to make another seachField in addition to the encrypted field. Updating
function would also be required to update both fields, generating more overhead and opportunity for error. This kind of decision is more
business oriented and is outside the scope for a class assignment.

Key Management:

The most important thing for key handling is to separate key from data.
For this assignment I placed the secret key and database name inside environment variables and loaded them with os.getenv('SECRET_KEY'). This
way if someone gain access to the settings.py file they still don't know these values. These sensitive information also doesn't appear as plain text on
github or other public repository, avoiding being leaked. For Travis CI to work these variables are set on Travis CI for the specific repository.

If someone could hack travis ci then they would gain access to my secret key. To avoid this perhaps something like python-decouple can be used.
For this solution, environmental variables are saved inside a .env file. The .env file can be saved on a different server and loaded via a deployment
script. This solution is not implemented for the assignment.

